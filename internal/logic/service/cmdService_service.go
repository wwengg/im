// Code generated by protoc-gen-simple. DO NOT EDIT.
// versions:
// - protoc-gen-simple v0.0.4
// - protoc          v3.17.2
// source: pbcmdService/pbcmdService.proto

package service

import (
	context "context"
	"github.com/aceld/zinx/zutils"
	"github.com/wwengg/im/model"
	"github.com/wwengg/im/proto/pbcmdService"
	"github.com/wwengg/im/proto/pbcommon"
	store "github.com/wwengg/simple/core/store"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = store.TODO
var _ = context.TODO

var GlobalCmdService = new(CmdService)

type CmdService struct{
	cmdServiceMap zutils.ShardLockMaps
}

func (s *CmdService) getCmdService(cmd int32) (model.CmdService,error)  {
	//if v, ok := s.cmdServiceMap.Get(fmt.Sprintf("%d", cmd)); ok {
	//	return v.(model.CmdService),nil
	//}
	if cmdService,err := model.GetCmdServiceByCmd(cmd);err == nil{
		// TODO cmdServiceMap暂不启用
		return cmdService,nil
	}else{
		return cmdService,err
	}
}

// CreateCmdService is server rpc method as defined
func (s *CmdService) CreateCmdService(ctx context.Context, args *pbcmdService.CmdServiceModel, reply *pbcommon.CommonResult) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = pbcommon.CommonResult{}

	return nil
}

// UpdateCmdService is server rpc method as defined
func (s *CmdService) UpdateCmdService(ctx context.Context, args *pbcmdService.CmdServiceModel, reply *pbcommon.CommonResult) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = pbcommon.CommonResult{}

	return nil
}

// DeleteCmdService is server rpc method as defined
func (s *CmdService) DeleteCmdService(ctx context.Context, args *pbcommon.IdArgs, reply *pbcommon.CommonResult) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = pbcommon.CommonResult{}

	return nil
}

// FindCmdServiceById is server rpc method as defined
func (s *CmdService) FindCmdServiceById(ctx context.Context, args *pbcommon.IdArgs, reply *pbcmdService.FindCmdServiceReplay) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = pbcmdService.FindCmdServiceReplay{}

	return nil
}

// FindCmdServiceById is server rpc method as defined
func (s *CmdService) FindCmdServiceByCmd(ctx context.Context, args *pbcommon.IdArgs, reply *pbcmdService.FindCmdServiceReplay) (err error) {
	if cmdService,err := s.getCmdService(int32(args.Id));err == nil{
		reply.Data = cmdService.Proto()
		reply.Code = pbcommon.ErrCode_ErrCodeSuccess
		return nil
	}else{
		reply.Code = pbcommon.ErrCode_ErrCodeFindError
		return nil
	}
	return nil
}

// FindCmdServiceList is server rpc method as defined
func (s *CmdService) FindCmdServiceList(ctx context.Context, args *pbcmdService.FindCmdServiceArgs, reply *pbcmdService.FindCmdServiceReplay) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = pbcmdService.FindCmdServiceReplay{}

	return nil
}
