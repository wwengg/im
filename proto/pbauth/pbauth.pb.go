// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pbauth/pbauth.proto

package pbauth

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	pbcommon "github.com/wwengg/im/proto/pbcommon"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuthLoginReply struct {
	Code                 pbcommon.EnumCode `protobuf:"varint,1,opt,name=code,proto3,enum=pbcommon.EnumCode" json:"code,omitempty"`
	Token                string            `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AuthLoginReply) Reset()         { *m = AuthLoginReply{} }
func (m *AuthLoginReply) String() string { return proto.CompactTextString(m) }
func (*AuthLoginReply) ProtoMessage()    {}
func (*AuthLoginReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5137a713311efcf, []int{0}
}
func (m *AuthLoginReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthLoginReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthLoginReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthLoginReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthLoginReply.Merge(m, src)
}
func (m *AuthLoginReply) XXX_Size() int {
	return m.Size()
}
func (m *AuthLoginReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthLoginReply.DiscardUnknown(m)
}

var xxx_messageInfo_AuthLoginReply proto.InternalMessageInfo

func (m *AuthLoginReply) GetCode() pbcommon.EnumCode {
	if m != nil {
		return m.Code
	}
	return pbcommon.EnumCode_None
}

func (m *AuthLoginReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

//
//管理员后台登录
//args: AdminLoginArgs
//reply: pbcommon.CommonResult
type AdminLoginArgs struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	CaptchaId            string   `protobuf:"bytes,3,opt,name=captchaId,proto3" json:"captchaId,omitempty"`
	CaptchaCode          string   `protobuf:"bytes,4,opt,name=captchaCode,proto3" json:"captchaCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminLoginArgs) Reset()         { *m = AdminLoginArgs{} }
func (m *AdminLoginArgs) String() string { return proto.CompactTextString(m) }
func (*AdminLoginArgs) ProtoMessage()    {}
func (*AdminLoginArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5137a713311efcf, []int{1}
}
func (m *AdminLoginArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminLoginArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminLoginArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminLoginArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminLoginArgs.Merge(m, src)
}
func (m *AdminLoginArgs) XXX_Size() int {
	return m.Size()
}
func (m *AdminLoginArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminLoginArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AdminLoginArgs proto.InternalMessageInfo

func (m *AdminLoginArgs) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AdminLoginArgs) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AdminLoginArgs) GetCaptchaId() string {
	if m != nil {
		return m.CaptchaId
	}
	return ""
}

func (m *AdminLoginArgs) GetCaptchaCode() string {
	if m != nil {
		return m.CaptchaCode
	}
	return ""
}

//
//获取图片上传token
//args: AdminLoginArgs
//reply: pbcommon.CommonResult
type WxLogin struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	EncryptedData        string   `protobuf:"bytes,2,opt,name=encryptedData,proto3" json:"encryptedData,omitempty"`
	Iv                   string   `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
	RawData              string   `protobuf:"bytes,4,opt,name=rawData,proto3" json:"rawData,omitempty"`
	Signature            string   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WxLogin) Reset()         { *m = WxLogin{} }
func (m *WxLogin) String() string { return proto.CompactTextString(m) }
func (*WxLogin) ProtoMessage()    {}
func (*WxLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5137a713311efcf, []int{2}
}
func (m *WxLogin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WxLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WxLogin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WxLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WxLogin.Merge(m, src)
}
func (m *WxLogin) XXX_Size() int {
	return m.Size()
}
func (m *WxLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_WxLogin.DiscardUnknown(m)
}

var xxx_messageInfo_WxLogin proto.InternalMessageInfo

func (m *WxLogin) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *WxLogin) GetEncryptedData() string {
	if m != nil {
		return m.EncryptedData
	}
	return ""
}

func (m *WxLogin) GetIv() string {
	if m != nil {
		return m.Iv
	}
	return ""
}

func (m *WxLogin) GetRawData() string {
	if m != nil {
		return m.RawData
	}
	return ""
}

func (m *WxLogin) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type WxLoginReply struct {
	Openid               string   `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WxLoginReply) Reset()         { *m = WxLoginReply{} }
func (m *WxLoginReply) String() string { return proto.CompactTextString(m) }
func (*WxLoginReply) ProtoMessage()    {}
func (*WxLoginReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5137a713311efcf, []int{3}
}
func (m *WxLoginReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WxLoginReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WxLoginReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WxLoginReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WxLoginReply.Merge(m, src)
}
func (m *WxLoginReply) XXX_Size() int {
	return m.Size()
}
func (m *WxLoginReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WxLoginReply.DiscardUnknown(m)
}

var xxx_messageInfo_WxLoginReply proto.InternalMessageInfo

func (m *WxLoginReply) GetOpenid() string {
	if m != nil {
		return m.Openid
	}
	return ""
}

type ParseTokenArgs struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseTokenArgs) Reset()         { *m = ParseTokenArgs{} }
func (m *ParseTokenArgs) String() string { return proto.CompactTextString(m) }
func (*ParseTokenArgs) ProtoMessage()    {}
func (*ParseTokenArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5137a713311efcf, []int{4}
}
func (m *ParseTokenArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseTokenArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseTokenArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseTokenArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseTokenArgs.Merge(m, src)
}
func (m *ParseTokenArgs) XXX_Size() int {
	return m.Size()
}
func (m *ParseTokenArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseTokenArgs.DiscardUnknown(m)
}

var xxx_messageInfo_ParseTokenArgs proto.InternalMessageInfo

func (m *ParseTokenArgs) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ParseTokenReply struct {
	Code                 pbcommon.EnumCode `protobuf:"varint,1,opt,name=code,proto3,enum=pbcommon.EnumCode" json:"code,omitempty"`
	NewToken             string            `protobuf:"bytes,2,opt,name=newToken,proto3" json:"newToken,omitempty"`
	Id                   int64             `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	RoleId               int64             `protobuf:"varint,4,opt,name=roleId,proto3" json:"roleId,omitempty"`
	AppId                int64             `protobuf:"varint,5,opt,name=appId,proto3" json:"appId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ParseTokenReply) Reset()         { *m = ParseTokenReply{} }
func (m *ParseTokenReply) String() string { return proto.CompactTextString(m) }
func (*ParseTokenReply) ProtoMessage()    {}
func (*ParseTokenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c5137a713311efcf, []int{5}
}
func (m *ParseTokenReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseTokenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseTokenReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseTokenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseTokenReply.Merge(m, src)
}
func (m *ParseTokenReply) XXX_Size() int {
	return m.Size()
}
func (m *ParseTokenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseTokenReply.DiscardUnknown(m)
}

var xxx_messageInfo_ParseTokenReply proto.InternalMessageInfo

func (m *ParseTokenReply) GetCode() pbcommon.EnumCode {
	if m != nil {
		return m.Code
	}
	return pbcommon.EnumCode_None
}

func (m *ParseTokenReply) GetNewToken() string {
	if m != nil {
		return m.NewToken
	}
	return ""
}

func (m *ParseTokenReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ParseTokenReply) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *ParseTokenReply) GetAppId() int64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func init() {
	proto.RegisterType((*AuthLoginReply)(nil), "pbauth.AuthLoginReply")
	proto.RegisterType((*AdminLoginArgs)(nil), "pbauth.AdminLoginArgs")
	proto.RegisterType((*WxLogin)(nil), "pbauth.WxLogin")
	proto.RegisterType((*WxLoginReply)(nil), "pbauth.WxLoginReply")
	proto.RegisterType((*ParseTokenArgs)(nil), "pbauth.ParseTokenArgs")
	proto.RegisterType((*ParseTokenReply)(nil), "pbauth.ParseTokenReply")
}

func init() { proto.RegisterFile("pbauth/pbauth.proto", fileDescriptor_c5137a713311efcf) }

var fileDescriptor_c5137a713311efcf = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0xc5, 0x49, 0xa7, 0x33, 0xb9, 0x40, 0x10, 0x06, 0xcd, 0x44, 0x11, 0x2a, 0x55, 0x84, 0xaa,
	0x59, 0x75, 0xa4, 0x61, 0x0f, 0x2a, 0x8f, 0x45, 0x25, 0x84, 0x50, 0x34, 0x12, 0x12, 0x3b, 0x37,
	0xb6, 0xda, 0x88, 0x89, 0x6d, 0x39, 0x4e, 0x4b, 0xbf, 0x00, 0x24, 0x96, 0xfc, 0x14, 0x4b, 0x3e,
	0x01, 0xf5, 0x4b, 0x90, 0x1f, 0xcd, 0x43, 0xac, 0x66, 0x95, 0x9c, 0x7b, 0xed, 0xeb, 0x73, 0x8e,
	0x8f, 0xe1, 0x89, 0x5c, 0x91, 0x46, 0x6f, 0xae, 0xdc, 0x67, 0x2e, 0x95, 0xd0, 0x02, 0x8f, 0x1d,
	0x4a, 0x2f, 0xe4, 0xaa, 0x10, 0x55, 0x25, 0xf8, 0xd5, 0xf1, 0xc7, 0x2d, 0xc8, 0x3e, 0x42, 0xbc,
	0x68, 0xf4, 0xe6, 0x83, 0x58, 0x97, 0x3c, 0x67, 0xf2, 0x76, 0x8f, 0x67, 0x30, 0x2a, 0x04, 0x65,
	0x09, 0x9a, 0xa2, 0xcb, 0xf8, 0x1a, 0xcf, 0xdb, 0x0d, 0xef, 0x79, 0x53, 0xbd, 0x15, 0x94, 0xe5,
	0xb6, 0x8f, 0x9f, 0xc2, 0x89, 0x16, 0x5f, 0x19, 0x4f, 0x82, 0x29, 0xba, 0x8c, 0x72, 0x07, 0xb2,
	0x1f, 0x08, 0xe2, 0x05, 0xad, 0x4a, 0x6e, 0x27, 0x2e, 0xd4, 0xba, 0xc6, 0x29, 0x9c, 0x35, 0x35,
	0x53, 0x9c, 0x54, 0x6e, 0x68, 0x94, 0xb7, 0xd8, 0xf4, 0x24, 0xa9, 0xeb, 0x9d, 0x50, 0xd4, 0xcf,
	0x69, 0x31, 0x7e, 0x06, 0x51, 0x41, 0xa4, 0x2e, 0x36, 0x64, 0x49, 0x93, 0xd0, 0x36, 0xbb, 0x02,
	0x9e, 0xc2, 0x7d, 0x0f, 0x0c, 0xa7, 0x64, 0x64, 0xfb, 0xfd, 0x52, 0xf6, 0x13, 0xc1, 0xe9, 0xe7,
	0x6f, 0x96, 0x07, 0xc6, 0x3d, 0x51, 0x91, 0x17, 0xf0, 0x02, 0x1e, 0x32, 0x5e, 0xa8, 0xbd, 0xd4,
	0x8c, 0xbe, 0x23, 0x9a, 0x78, 0x02, 0xc3, 0x22, 0x8e, 0x21, 0x28, 0xb7, 0xfe, 0xf8, 0xa0, 0xdc,
	0xe2, 0x04, 0x4e, 0x15, 0xd9, 0xd9, 0xf5, 0xee, 0xcc, 0x23, 0x34, 0x7c, 0xeb, 0x72, 0xcd, 0x89,
	0x6e, 0x14, 0x4b, 0x4e, 0x1c, 0xdf, 0xb6, 0x90, 0xcd, 0xe0, 0x81, 0x27, 0xe3, 0x6c, 0x3e, 0x87,
	0xb1, 0x90, 0x8c, 0x97, 0xd4, 0x73, 0xf2, 0x28, 0x9b, 0x41, 0xfc, 0x89, 0xa8, 0x9a, 0xdd, 0x18,
	0x3b, 0xad, 0x7f, 0xad, 0xd1, 0xa8, 0x6f, 0xf4, 0x2f, 0x04, 0x8f, 0xba, 0x85, 0x77, 0xbb, 0xba,
	0x14, 0xce, 0x38, 0xdb, 0xdd, 0xf4, 0x6e, 0xaf, 0xc5, 0x56, 0xaf, 0xb3, 0x3b, 0xcc, 0x83, 0x92,
	0x1a, 0x9e, 0x4a, 0xdc, 0xb2, 0x25, 0xb5, 0x72, 0xc3, 0xdc, 0x23, 0xc3, 0x8a, 0x48, 0xb9, 0xa4,
	0x56, 0x69, 0x98, 0x3b, 0x70, 0xfd, 0x1d, 0xc1, 0xc8, 0xe4, 0x09, 0xbf, 0x02, 0xe8, 0x62, 0x80,
	0xcf, 0xe7, 0x3e, 0x95, 0xc3, 0x68, 0xa4, 0x5d, 0x7d, 0x90, 0xc1, 0xec, 0x1e, 0x7e, 0x0d, 0xd0,
	0xa9, 0xeb, 0xf6, 0x0f, 0xad, 0x49, 0x2f, 0xfe, 0xaf, 0xfb, 0x01, 0x6f, 0x9e, 0xff, 0x3e, 0x4c,
	0xd0, 0x9f, 0xc3, 0x04, 0xfd, 0x3d, 0x4c, 0xd0, 0x97, 0xc7, 0xee, 0x69, 0x98, 0xc8, 0xfb, 0x07,
	0xb2, 0x1a, 0x5b, 0xf4, 0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x40, 0x51, 0x6f, 0x38,
	0x03, 0x00, 0x00,
}

func (m *AuthLoginReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthLoginReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthLoginReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPbauth(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdminLoginArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminLoginArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminLoginArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CaptchaCode) > 0 {
		i -= len(m.CaptchaCode)
		copy(dAtA[i:], m.CaptchaCode)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.CaptchaCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CaptchaId) > 0 {
		i -= len(m.CaptchaId)
		copy(dAtA[i:], m.CaptchaId)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.CaptchaId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WxLogin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxLogin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WxLogin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RawData) > 0 {
		i -= len(m.RawData)
		copy(dAtA[i:], m.RawData)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.RawData)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Iv) > 0 {
		i -= len(m.Iv)
		copy(dAtA[i:], m.Iv)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.Iv)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EncryptedData) > 0 {
		i -= len(m.EncryptedData)
		copy(dAtA[i:], m.EncryptedData)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.EncryptedData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WxLoginReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxLoginReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WxLoginReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Openid) > 0 {
		i -= len(m.Openid)
		copy(dAtA[i:], m.Openid)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.Openid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParseTokenArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseTokenArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParseTokenArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ParseTokenReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseTokenReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParseTokenReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AppId != 0 {
		i = encodeVarintPbauth(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x28
	}
	if m.RoleId != 0 {
		i = encodeVarintPbauth(dAtA, i, uint64(m.RoleId))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintPbauth(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NewToken) > 0 {
		i -= len(m.NewToken)
		copy(dAtA[i:], m.NewToken)
		i = encodeVarintPbauth(dAtA, i, uint64(len(m.NewToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPbauth(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPbauth(dAtA []byte, offset int, v uint64) int {
	offset -= sovPbauth(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthLoginReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPbauth(uint64(m.Code))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdminLoginArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	l = len(m.CaptchaId)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	l = len(m.CaptchaCode)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WxLogin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	l = len(m.EncryptedData)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	l = len(m.Iv)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	l = len(m.RawData)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WxLoginReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Openid)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParseTokenArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParseTokenReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPbauth(uint64(m.Code))
	}
	l = len(m.NewToken)
	if l > 0 {
		n += 1 + l + sovPbauth(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPbauth(uint64(m.Id))
	}
	if m.RoleId != 0 {
		n += 1 + sovPbauth(uint64(m.RoleId))
	}
	if m.AppId != 0 {
		n += 1 + sovPbauth(uint64(m.AppId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPbauth(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPbauth(x uint64) (n int) {
	return sovPbauth(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthLoginReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthLoginReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthLoginReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= pbcommon.EnumCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminLoginArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminLoginArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminLoginArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaptchaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaptchaCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxLogin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxLogin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxLogin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxLoginReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxLoginReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxLoginReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseTokenArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseTokenArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseTokenArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseTokenReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbauth
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseTokenReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseTokenReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= pbcommon.EnumCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbauth
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbauth
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleId", wireType)
			}
			m.RoleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbauth(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbauth
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPbauth(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPbauth
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbauth
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPbauth
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPbauth
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPbauth
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPbauth        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPbauth          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPbauth = fmt.Errorf("proto: unexpected end of group")
)
