// Code generated by protoc-gen-rpcx. DO NOT EDIT.
// versions:
// - protoc-gen-rpcx v0.3.0
// - protoc          v3.20.3
// source: pbgate/gate.proto

package pbgate

import (
	context "context"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = context.TODO
var _ = server.NewServer
var _ = client.NewClient
var _ = protocol.NewMessage

//================== interface skeleton ===================
type GateAble interface {
	// GateAble can be used for interface verification.

	// SendMsg is server rpc method as defined
	SendMsg(ctx context.Context, args *SendMsgData, reply *SendMsgDataReply) (err error)
}

//================== server skeleton ===================
type GateImpl struct{}

// ServeForGate starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForGate(addr string) error {
	s := server.NewServer()
	s.RegisterName("Gate", new(GateImpl), "")
	return s.Serve("tcp", addr)
}

// SendMsg is server rpc method as defined
func (s *GateImpl) SendMsg(ctx context.Context, args *SendMsgData, reply *SendMsgDataReply) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = SendMsgDataReply{}

	return nil
}

//================== client stub ===================
// Gate is a client wrapped XClient.
type GateClient struct {
	xclient client.XClient
}

// NewGateClient wraps a XClient as GateClient.
// You can pass a shared XClient object created by NewXClientForGate.
func NewGateClient(xclient client.XClient) *GateClient {
	return &GateClient{xclient: xclient}
}

// NewXClientForGate creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForGate(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Gate", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// SendMsg is client rpc method as defined
func (c *GateClient) SendMsg(ctx context.Context, args *SendMsgData) (reply *SendMsgDataReply, err error) {
	reply = &SendMsgDataReply{}
	err = c.xclient.Call(ctx, "SendMsg", args, reply)
	return reply, err
}

//================== oneclient stub ===================
// GateOneClient is a client wrapped oneClient.
type GateOneClient struct {
	serviceName string
	oneclient   *client.OneClient
}

// NewGateOneClient wraps a OneClient as GateOneClient.
// You can pass a shared OneClient object created by NewOneClientForGate.
func NewGateOneClient(oneclient *client.OneClient) *GateOneClient {
	return &GateOneClient{
		serviceName: "Gate",
		oneclient:   oneclient,
	}
}

// ======================================================

// SendMsg is client rpc method as defined
func (c *GateOneClient) SendMsg(ctx context.Context, args *SendMsgData) (reply *SendMsgDataReply, err error) {
	reply = &SendMsgDataReply{}
	err = c.oneclient.Call(ctx, c.serviceName, "SendMsg", args, reply)
	return reply, err
}
