// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pbcommon/pbcommon.proto

package pbcommon

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EnumCode int32

const (
	EnumCode_None         EnumCode = 0
	EnumCode_Success      EnumCode = 200
	EnumCode_Fail         EnumCode = 500
	EnumCode_Unknown      EnumCode = 501
	EnumCode_Internal     EnumCode = 502
	EnumCode_Invalid      EnumCode = 503
	EnumCode_InvalidParam EnumCode = 504
	EnumCode_ParamError   EnumCode = 505
	EnumCode_FindError    EnumCode = 1001
	EnumCode_CreateError  EnumCode = 1002
	EnumCode_DeleteError  EnumCode = 1003
	EnumCode_UpdateError  EnumCode = 1004
)

var EnumCode_name = map[int32]string{
	0:    "None",
	200:  "Success",
	500:  "Fail",
	501:  "Unknown",
	502:  "Internal",
	503:  "Invalid",
	504:  "InvalidParam",
	505:  "ParamError",
	1001: "FindError",
	1002: "CreateError",
	1003: "DeleteError",
	1004: "UpdateError",
}

var EnumCode_value = map[string]int32{
	"None":         0,
	"Success":      200,
	"Fail":         500,
	"Unknown":      501,
	"Internal":     502,
	"Invalid":      503,
	"InvalidParam": 504,
	"ParamError":   505,
	"FindError":    1001,
	"CreateError":  1002,
	"DeleteError":  1003,
	"UpdateError":  1004,
}

func (x EnumCode) String() string {
	return proto.EnumName(EnumCode_name, int32(x))
}

func (EnumCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_83052c831d6681ad, []int{0}
}

type CommonResult struct {
	Code                 EnumCode `protobuf:"varint,1,opt,name=code,proto3,enum=pbcommon.EnumCode" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommonResult) Reset()         { *m = CommonResult{} }
func (m *CommonResult) String() string { return proto.CompactTextString(m) }
func (*CommonResult) ProtoMessage()    {}
func (*CommonResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_83052c831d6681ad, []int{0}
}
func (m *CommonResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonResult.Merge(m, src)
}
func (m *CommonResult) XXX_Size() int {
	return m.Size()
}
func (m *CommonResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonResult.DiscardUnknown(m)
}

var xxx_messageInfo_CommonResult proto.InternalMessageInfo

func (m *CommonResult) GetCode() EnumCode {
	if m != nil {
		return m.Code
	}
	return EnumCode_None
}

func (m *CommonResult) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type IdArgs struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IdStr                string   `protobuf:"bytes,2,opt,name=idStr,proto3" json:"idStr,omitempty"`
	Ids                  []int64  `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	IdStrs               []string `protobuf:"bytes,4,rep,name=idStrs,proto3" json:"idStrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdArgs) Reset()         { *m = IdArgs{} }
func (m *IdArgs) String() string { return proto.CompactTextString(m) }
func (*IdArgs) ProtoMessage()    {}
func (*IdArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_83052c831d6681ad, []int{1}
}
func (m *IdArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdArgs.Merge(m, src)
}
func (m *IdArgs) XXX_Size() int {
	return m.Size()
}
func (m *IdArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_IdArgs.DiscardUnknown(m)
}

var xxx_messageInfo_IdArgs proto.InternalMessageInfo

func (m *IdArgs) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdArgs) GetIdStr() string {
	if m != nil {
		return m.IdStr
	}
	return ""
}

func (m *IdArgs) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *IdArgs) GetIdStrs() []string {
	if m != nil {
		return m.IdStrs
	}
	return nil
}

type PageInfo struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize             int32    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_83052c831d6681ad, []int{2}
}
func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *PageInfo) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type CommonList struct {
	PageInfo             *PageInfo `protobuf:"bytes,1,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CommonList) Reset()         { *m = CommonList{} }
func (m *CommonList) String() string { return proto.CompactTextString(m) }
func (*CommonList) ProtoMessage()    {}
func (*CommonList) Descriptor() ([]byte, []int) {
	return fileDescriptor_83052c831d6681ad, []int{3}
}
func (m *CommonList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonList.Merge(m, src)
}
func (m *CommonList) XXX_Size() int {
	return m.Size()
}
func (m *CommonList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonList.DiscardUnknown(m)
}

var xxx_messageInfo_CommonList proto.InternalMessageInfo

func (m *CommonList) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func init() {
	proto.RegisterEnum("pbcommon.EnumCode", EnumCode_name, EnumCode_value)
	proto.RegisterType((*CommonResult)(nil), "pbcommon.CommonResult")
	proto.RegisterType((*IdArgs)(nil), "pbcommon.IdArgs")
	proto.RegisterType((*PageInfo)(nil), "pbcommon.PageInfo")
	proto.RegisterType((*CommonList)(nil), "pbcommon.commonList")
}

func init() { proto.RegisterFile("pbcommon/pbcommon.proto", fileDescriptor_83052c831d6681ad) }

var fileDescriptor_83052c831d6681ad = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x52, 0x4b, 0xab, 0xd3, 0x40,
	0x14, 0x76, 0x3a, 0x69, 0x9b, 0x9e, 0x5b, 0xeb, 0x78, 0x10, 0x2d, 0x2e, 0x4a, 0xa9, 0x20, 0xc5,
	0x45, 0x8b, 0xba, 0x13, 0x37, 0x5a, 0xef, 0xc5, 0x82, 0xc8, 0x65, 0xca, 0x05, 0x71, 0x37, 0xcd,
	0x8c, 0x71, 0x30, 0x99, 0x29, 0x33, 0x89, 0x05, 0x7f, 0x9e, 0xab, 0xbb, 0xf4, 0x27, 0x48, 0x77,
	0x3e, 0x96, 0x3e, 0x77, 0x92, 0x49, 0x13, 0x5c, 0xe5, 0x7b, 0xe5, 0x3b, 0x73, 0xe0, 0xc0, 0xad,
	0xdd, 0x36, 0xb1, 0x79, 0x6e, 0xcd, 0xb2, 0x01, 0x8b, 0x9d, 0xb3, 0x85, 0xc5, 0xb8, 0xe1, 0xb3,
	0xe7, 0x30, 0x5c, 0x05, 0xc4, 0x95, 0x2f, 0xb3, 0x02, 0xef, 0x42, 0x94, 0x58, 0xa9, 0xc6, 0x64,
	0x4a, 0xe6, 0xa3, 0x07, 0xb8, 0x68, 0x7f, 0x3c, 0x35, 0x65, 0xbe, 0xb2, 0x52, 0xf1, 0xe0, 0x23,
	0x03, 0x9a, 0xfb, 0x74, 0xdc, 0x99, 0x92, 0xf9, 0x80, 0x57, 0x70, 0xf6, 0x0a, 0x7a, 0x6b, 0xf9,
	0xc4, 0xa5, 0x1e, 0x47, 0xd0, 0xd1, 0x32, 0x34, 0x50, 0xde, 0xd1, 0x12, 0x6f, 0x40, 0x57, 0xcb,
	0x4d, 0xe1, 0x8e, 0xe9, 0x9a, 0x54, 0x0d, 0x5a, 0xfa, 0x31, 0x9d, 0xd2, 0x39, 0xe5, 0x15, 0xc4,
	0x9b, 0xd0, 0x0b, 0x96, 0x1f, 0x47, 0x53, 0x3a, 0x1f, 0xf0, 0x23, 0x9b, 0x3d, 0x82, 0xf8, 0x5c,
	0xa4, 0x6a, 0x6d, 0xde, 0x58, 0x44, 0x88, 0x76, 0x22, 0xad, 0xdf, 0xd7, 0xe5, 0x01, 0xe3, 0x6d,
	0x88, 0xab, 0xef, 0x46, 0x7f, 0x50, 0x61, 0x44, 0x97, 0xb7, 0x7c, 0xf6, 0x18, 0xa0, 0x5e, 0xe0,
	0x85, 0xf6, 0x05, 0x2e, 0xea, 0x64, 0xd5, 0x14, 0x1a, 0x4e, 0xfe, 0xdf, 0xb0, 0x99, 0xc1, 0xdb,
	0xcc, 0xbd, 0x8f, 0x04, 0xe2, 0x66, 0x71, 0x8c, 0x21, 0x7a, 0x69, 0x8d, 0x62, 0x57, 0x70, 0x08,
	0xfd, 0x4d, 0x99, 0x24, 0xca, 0x7b, 0x76, 0x49, 0x70, 0x00, 0xd1, 0x99, 0xd0, 0x19, 0xfb, 0x41,
	0x2b, 0xe3, 0xc2, 0xbc, 0x33, 0x76, 0x6f, 0xd8, 0x4f, 0x8a, 0x57, 0x21, 0x5e, 0x9b, 0x42, 0x39,
	0x23, 0x32, 0xf6, 0x2b, 0x98, 0x6b, 0xf3, 0x5e, 0x64, 0x5a, 0xb2, 0xdf, 0x14, 0xaf, 0xc3, 0xf0,
	0xc8, 0xce, 0x85, 0x13, 0x39, 0xfb, 0x43, 0xf1, 0x1a, 0x40, 0xc0, 0xa7, 0xce, 0x59, 0xc7, 0xfe,
	0x52, 0x1c, 0xc1, 0xe0, 0x4c, 0x1b, 0x59, 0xf3, 0x2f, 0x7d, 0x64, 0x70, 0xb2, 0x72, 0x4a, 0x14,
	0xaa, 0x56, 0xbe, 0x06, 0xe5, 0x99, 0xca, 0x54, 0xa3, 0x7c, 0x0b, 0xca, 0xc5, 0x4e, 0xb6, 0x99,
	0xef, 0xfd, 0xa7, 0xf7, 0x2f, 0x0f, 0x13, 0xf2, 0xe9, 0x30, 0x21, 0x9f, 0x0f, 0x13, 0xf2, 0xfa,
	0x4e, 0xaa, 0x8b, 0xb7, 0xe5, 0x76, 0x91, 0xd8, 0x7c, 0xb9, 0xdf, 0x2b, 0x93, 0xa6, 0x4b, 0x9d,
	0x2f, 0xc3, 0x59, 0xb4, 0x57, 0xb2, 0xed, 0x05, 0xfe, 0xf0, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe8, 0xcf, 0xa5, 0x9a, 0x41, 0x02, 0x00, 0x00,
}

func (m *CommonResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPbcommon(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPbcommon(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IdArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.IdStrs) > 0 {
		for iNdEx := len(m.IdStrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IdStrs[iNdEx])
			copy(dAtA[i:], m.IdStrs[iNdEx])
			i = encodeVarintPbcommon(dAtA, i, uint64(len(m.IdStrs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPbcommon(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IdStr) > 0 {
		i -= len(m.IdStr)
		copy(dAtA[i:], m.IdStr)
		i = encodeVarintPbcommon(dAtA, i, uint64(len(m.IdStr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPbcommon(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PageInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageSize != 0 {
		i = encodeVarintPbcommon(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintPbcommon(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommonList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PageInfo != nil {
		{
			size, err := m.PageInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbcommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPbcommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovPbcommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPbcommon(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPbcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IdArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPbcommon(uint64(m.Id))
	}
	l = len(m.IdStr)
	if l > 0 {
		n += 1 + l + sovPbcommon(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovPbcommon(uint64(e))
		}
		n += 1 + sovPbcommon(uint64(l)) + l
	}
	if len(m.IdStrs) > 0 {
		for _, s := range m.IdStrs {
			l = len(s)
			n += 1 + l + sovPbcommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovPbcommon(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovPbcommon(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommonList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovPbcommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPbcommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPbcommon(x uint64) (n int) {
	return sovPbcommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= EnumCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPbcommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPbcommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPbcommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPbcommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdStrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbcommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdStrs = append(m.IdStrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPbcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbcommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: commonList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: commonList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbcommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbcommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &PageInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbcommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPbcommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPbcommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPbcommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbcommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbcommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPbcommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPbcommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPbcommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPbcommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPbcommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPbcommon = fmt.Errorf("proto: unexpected end of group")
)
