// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pbcmdService/pbcmdService.proto

package pbcmdService

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	pbcommon "github.com/wwengg/im/proto/pbcommon"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CmdServiceModel struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            string   `protobuf:"bytes,2,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt            string   `protobuf:"bytes,3,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Cmd                  int64    `protobuf:"varint,4,opt,name=cmd,proto3" json:"cmd,omitempty"`
	ServicePath          string   `protobuf:"bytes,5,opt,name=servicePath,proto3" json:"servicePath,omitempty"`
	ServiceName          string   `protobuf:"bytes,6,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmdServiceModel) Reset()         { *m = CmdServiceModel{} }
func (m *CmdServiceModel) String() string { return proto.CompactTextString(m) }
func (*CmdServiceModel) ProtoMessage()    {}
func (*CmdServiceModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f739e596e609742, []int{0}
}
func (m *CmdServiceModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CmdServiceModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CmdServiceModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CmdServiceModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdServiceModel.Merge(m, src)
}
func (m *CmdServiceModel) XXX_Size() int {
	return m.Size()
}
func (m *CmdServiceModel) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdServiceModel.DiscardUnknown(m)
}

var xxx_messageInfo_CmdServiceModel proto.InternalMessageInfo

func (m *CmdServiceModel) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CmdServiceModel) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *CmdServiceModel) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *CmdServiceModel) GetCmd() int64 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *CmdServiceModel) GetServicePath() string {
	if m != nil {
		return m.ServicePath
	}
	return ""
}

func (m *CmdServiceModel) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type FindCmdServiceArgs struct {
	PageInfo             *pbcommon.PageInfo `protobuf:"bytes,1,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
	Query                *CmdServiceModel   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FindCmdServiceArgs) Reset()         { *m = FindCmdServiceArgs{} }
func (m *FindCmdServiceArgs) String() string { return proto.CompactTextString(m) }
func (*FindCmdServiceArgs) ProtoMessage()    {}
func (*FindCmdServiceArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f739e596e609742, []int{1}
}
func (m *FindCmdServiceArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindCmdServiceArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindCmdServiceArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindCmdServiceArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindCmdServiceArgs.Merge(m, src)
}
func (m *FindCmdServiceArgs) XXX_Size() int {
	return m.Size()
}
func (m *FindCmdServiceArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_FindCmdServiceArgs.DiscardUnknown(m)
}

var xxx_messageInfo_FindCmdServiceArgs proto.InternalMessageInfo

func (m *FindCmdServiceArgs) GetPageInfo() *pbcommon.PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *FindCmdServiceArgs) GetQuery() *CmdServiceModel {
	if m != nil {
		return m.Query
	}
	return nil
}

type FindCmdServiceReplay struct {
	Code                 pbcommon.EnumCode  `protobuf:"varint,1,opt,name=code,proto3,enum=pbcommon.EnumCode" json:"code,omitempty"`
	Msg                  string             `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 *CmdServiceModel   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	List                 []*CmdServiceModel `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FindCmdServiceReplay) Reset()         { *m = FindCmdServiceReplay{} }
func (m *FindCmdServiceReplay) String() string { return proto.CompactTextString(m) }
func (*FindCmdServiceReplay) ProtoMessage()    {}
func (*FindCmdServiceReplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f739e596e609742, []int{2}
}
func (m *FindCmdServiceReplay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindCmdServiceReplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindCmdServiceReplay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindCmdServiceReplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindCmdServiceReplay.Merge(m, src)
}
func (m *FindCmdServiceReplay) XXX_Size() int {
	return m.Size()
}
func (m *FindCmdServiceReplay) XXX_DiscardUnknown() {
	xxx_messageInfo_FindCmdServiceReplay.DiscardUnknown(m)
}

var xxx_messageInfo_FindCmdServiceReplay proto.InternalMessageInfo

func (m *FindCmdServiceReplay) GetCode() pbcommon.EnumCode {
	if m != nil {
		return m.Code
	}
	return pbcommon.EnumCode_None
}

func (m *FindCmdServiceReplay) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FindCmdServiceReplay) GetData() *CmdServiceModel {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FindCmdServiceReplay) GetList() []*CmdServiceModel {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*CmdServiceModel)(nil), "pbcmdService.CmdServiceModel")
	proto.RegisterType((*FindCmdServiceArgs)(nil), "pbcmdService.FindCmdServiceArgs")
	proto.RegisterType((*FindCmdServiceReplay)(nil), "pbcmdService.FindCmdServiceReplay")
}

func init() { proto.RegisterFile("pbcmdService/pbcmdService.proto", fileDescriptor_6f739e596e609742) }

var fileDescriptor_6f739e596e609742 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xdd, 0x6a, 0xd4, 0x40,
	0x14, 0xee, 0x6c, 0xd2, 0x62, 0xcf, 0x4a, 0x0d, 0x83, 0x68, 0x28, 0xba, 0x86, 0x5c, 0x68, 0xaf,
	0x12, 0xdc, 0xe2, 0xad, 0xd0, 0x46, 0x85, 0xc5, 0x2a, 0x25, 0xe2, 0x8d, 0x78, 0x93, 0x64, 0xc6,
	0x74, 0x20, 0x93, 0x89, 0xc9, 0xc4, 0x25, 0xaf, 0xe1, 0xab, 0x08, 0x3e, 0x83, 0x97, 0x3e, 0x82,
	0xec, 0x93, 0xc8, 0x4c, 0xd6, 0xfc, 0x2c, 0xcb, 0xba, 0x17, 0xbd, 0xda, 0xb3, 0xdf, 0xf7, 0x9d,
	0xef, 0xfc, 0x65, 0xe0, 0x49, 0x11, 0x27, 0x9c, 0x7c, 0xa0, 0xe5, 0x37, 0x96, 0x50, 0x7f, 0xf8,
	0xc7, 0x2b, 0x4a, 0x21, 0x05, 0xbe, 0x3b, 0xc4, 0x4e, 0x1f, 0x16, 0x71, 0x22, 0x38, 0x17, 0xb9,
	0xff, 0x2f, 0x68, 0x65, 0xee, 0x0f, 0x04, 0xf7, 0x82, 0x4e, 0xf7, 0x4e, 0x10, 0x9a, 0xe1, 0x13,
	0x98, 0x30, 0x62, 0x23, 0x07, 0x9d, 0x19, 0xe1, 0x84, 0x11, 0xfc, 0x08, 0x8e, 0x93, 0x92, 0x46,
	0x92, 0x92, 0x0b, 0x69, 0x4f, 0x1c, 0x74, 0x76, 0x1c, 0xf6, 0x80, 0x62, 0xeb, 0x82, 0xac, 0x59,
	0xa3, 0x65, 0x3b, 0x00, 0x5b, 0x60, 0x24, 0x9c, 0xd8, 0xa6, 0x36, 0x53, 0x21, 0x76, 0x60, 0x5a,
	0xb5, 0xd5, 0xae, 0x23, 0x79, 0x63, 0x1f, 0xea, 0x8c, 0x21, 0x34, 0x50, 0xbc, 0x8f, 0x38, 0xb5,
	0x8f, 0x46, 0x0a, 0x05, 0xb9, 0x0d, 0xe0, 0x37, 0x2c, 0x27, 0x7d, 0xe3, 0x17, 0x65, 0x5a, 0x61,
	0x0f, 0xee, 0x14, 0x51, 0x4a, 0x17, 0xf9, 0x17, 0xa1, 0xbb, 0x9f, 0xce, 0xb1, 0xd7, 0x8d, 0x7b,
	0xbd, 0x66, 0xc2, 0x4e, 0x83, 0xcf, 0xe1, 0xf0, 0x6b, 0x4d, 0xcb, 0x46, 0xcf, 0x34, 0x9d, 0x3f,
	0xf6, 0x46, 0x6b, 0xdc, 0xd8, 0x4a, 0xd8, 0x6a, 0xdd, 0x9f, 0x08, 0xee, 0x8f, 0x6b, 0x87, 0xb4,
	0xc8, 0xa2, 0x06, 0x3f, 0x05, 0x33, 0x11, 0x84, 0xea, 0xca, 0x27, 0xc3, 0xca, 0xaf, 0xf3, 0x9a,
	0x07, 0x82, 0xd0, 0x50, 0xf3, 0x6a, 0x23, 0xbc, 0x4a, 0xd7, 0x7b, 0x54, 0x21, 0x7e, 0x0e, 0x26,
	0x89, 0x64, 0xa4, 0x97, 0xf7, 0xdf, 0x36, 0xb4, 0x54, 0xa5, 0x64, 0xac, 0x92, 0xb6, 0xe9, 0x18,
	0x7b, 0xa4, 0x28, 0xe9, 0xfc, 0xbb, 0x01, 0xd0, 0x33, 0xf8, 0x2d, 0x58, 0x81, 0xbe, 0xe1, 0x00,
	0xdb, 0xed, 0x73, 0xfa, 0xa0, 0x9f, 0x29, 0xd0, 0x3f, 0x21, 0xad, 0xea, 0x4c, 0xba, 0x07, 0xca,
	0xec, 0xa3, 0x3e, 0xf9, 0x6d, 0x98, 0xbd, 0x04, 0xeb, 0x15, 0xcd, 0xe8, 0xc8, 0xcc, 0xea, 0xd5,
	0x0b, 0xa2, 0x8e, 0xbd, 0x23, 0xff, 0x6a, 0xf3, 0xe3, 0xb8, 0x6c, 0x16, 0x64, 0x8b, 0x83, 0x3b,
	0x6e, 0x70, 0xdb, 0x51, 0xdd, 0x03, 0xfc, 0x79, 0xd3, 0xed, 0x8a, 0x55, 0x12, 0x3b, 0xbb, 0x72,
	0xf7, 0x77, 0xbf, 0x7c, 0xf1, 0x6b, 0x35, 0x43, 0xbf, 0x57, 0x33, 0xf4, 0x67, 0x35, 0x43, 0x9f,
	0x9e, 0xa5, 0x4c, 0xde, 0xd4, 0xb1, 0x97, 0x08, 0xee, 0x2f, 0x97, 0x34, 0x4f, 0x53, 0x9f, 0x71,
	0x5f, 0x3f, 0xd4, 0xd1, 0x13, 0x8f, 0x8f, 0x34, 0x76, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0xcc,
	0x29, 0x1d, 0xeb, 0x06, 0x04, 0x00, 0x00,
}

func (m *CmdServiceModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CmdServiceModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CmdServiceModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintPbcmdService(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ServicePath) > 0 {
		i -= len(m.ServicePath)
		copy(dAtA[i:], m.ServicePath)
		i = encodeVarintPbcmdService(dAtA, i, uint64(len(m.ServicePath)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Cmd != 0 {
		i = encodeVarintPbcmdService(dAtA, i, uint64(m.Cmd))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintPbcmdService(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintPbcmdService(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPbcmdService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FindCmdServiceArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindCmdServiceArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindCmdServiceArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Query != nil {
		{
			size, err := m.Query.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbcmdService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PageInfo != nil {
		{
			size, err := m.PageInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbcmdService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindCmdServiceReplay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindCmdServiceReplay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindCmdServiceReplay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPbcmdService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPbcmdService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintPbcmdService(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintPbcmdService(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPbcmdService(dAtA []byte, offset int, v uint64) int {
	offset -= sovPbcmdService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CmdServiceModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPbcmdService(uint64(m.Id))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovPbcmdService(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovPbcmdService(uint64(l))
	}
	if m.Cmd != 0 {
		n += 1 + sovPbcmdService(uint64(m.Cmd))
	}
	l = len(m.ServicePath)
	if l > 0 {
		n += 1 + l + sovPbcmdService(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovPbcmdService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindCmdServiceArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovPbcmdService(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.Size()
		n += 1 + l + sovPbcmdService(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindCmdServiceReplay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPbcmdService(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPbcmdService(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPbcmdService(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovPbcmdService(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPbcmdService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPbcmdService(x uint64) (n int) {
	return sovPbcmdService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CmdServiceModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbcmdService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CmdServiceModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CmdServiceModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbcmdService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbcmdService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbcmdService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbcmdService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbcmdService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindCmdServiceArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbcmdService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindCmdServiceArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindCmdServiceArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbcmdService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &pbcommon.PageInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbcmdService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &CmdServiceModel{}
			}
			if err := m.Query.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbcmdService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindCmdServiceReplay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPbcmdService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindCmdServiceReplay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindCmdServiceReplay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= pbcommon.EnumCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPbcmdService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbcmdService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &CmdServiceModel{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPbcmdService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CmdServiceModel{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPbcmdService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPbcmdService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPbcmdService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPbcmdService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPbcmdService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPbcmdService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPbcmdService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPbcmdService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPbcmdService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPbcmdService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPbcmdService = fmt.Errorf("proto: unexpected end of group")
)
